（1）首先知道了c语言上面的fopen()以及fseek(),fclose()等等这些文件有关的	函数，在linux下的实现都是调用了具体系统调用，
	open(),creat(),lseek()close()等等，c语言是在这上面实现了一层封装，使c语言的可移植性更好。

（2）了解到了linux系统上的文件分类，分为普通文件，文件夹文件，连接文件，字符特殊型文件，块特殊型文件等等。还了解到了文件权限。

（3）学会了linux上系统编程堆文件操作的一些函数
	open()函数，返回值是文件描述符，参数是文件名，打开方式（只读，只写，可读可写）还可能有第三个参数（设定创建文件的权限），
			权限是（所给定权限参数&～umask）。
	creat()函数，是open()函数的一种使用（open()使用某种参数和creat()功能一样），creat()建立的文件是只写的。
	close()函数，参数是文件描述符。
	read()函数，读取文件。
	write()函数，写入文件。
	lseek()函数，文件指针位置的移动（可能会有文件空洞，但实际不占磁盘空间）
	dup()函数和dup2()函数，复制文件描述符，dup2()可指定新的文件描述符
	fcntl()函数和ioctl()函数等后面实际用到在仔细研究。
	stat(),lstat(),fstat()函数都是获取文件属性的，参数不一样，属性放到一个struct stat类型的结构体中
	chmod(),fchmod()函数用于修改文件存取权限。
	chown(),fchown(),lchown()函数修改文件的用户和用户组。
	truncate(),ftruncate()函数修改文件大小。
	utime()函数修改存取时间和修改时间，即st_mtime和st_ctime。
	umask()函数设置创建文件时使用的屏蔽字，并且返回以前的值。
	remove()函数，删除文件以及文件夹，封装了unlink()和rmdir()。
	mkdir()函数创建文件夹。
	rmdir()函数删除文件夹。只能删除空目录。
	getcwd()函数获取当前目录。
	chdir()设置工作目录。
	opendir()函数打开文件夹。
	readdir()函数读取打开文件夹中的文件。
	closedir()关闭文件夹。

（4） 这一周就是学习了这些函数如何使用，并且实现了一个自己的ls，做这个东西的收获就是
	（1）了解了如何组织众多的参数，用宏定义把这些参数先定义好，然后再位或运算就可以了，以后添加参数也很简单
	（2）具体实践了一次递归与运算
	（3）把我的代码用git管理，熟悉了git这个好用的代码托管工具
	（4）使用了makefile来编译程序，巩固了makefile的基本规则
	（5）了解了ls实现的思路
